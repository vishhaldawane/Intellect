


		Java Programming Language

				- With Vishhal


	its not a "common environment" - offline - classroom

	unique environment - online - your home

		1 to 50 - 50 homes - RHK 1 bhk 2 bhk 3 bhk 
	A proper internet connection / Plan B/ Plan C
			1. wired connection  / wifi / mobile 
				40 mbps 

	Mic is on - your mic is off

	10.00  to 6.00

	10:00 to 11:15 - First Session

	11:15 to 11:30 - 		First Break

	11:30 to 13:00 - Second Session

	13:00 to 13:45 - 		Second Break - lunch 

	13:45 to 16:15 - Third Session

	16:15 to 16:30 - 		Third break

	16:30 to 18:00 - Fourth Session

	1. Rating on Java 
		1 to 10 
		low   high

	2. Background - mtech btech be EE IT civil

	3. Expectations

	excel sheet 
	 10 parameters

			punctuality	attentiveness	responseto queries 	class  thoery practical ......
	1. SAchin	10		3
	2. Sameer	8		10		
					10		0

	
	Day 1
	-------------
	Introduction to Java Programming
	First Java program
	Features of Java 
	OOPS concepts
		- Association aspects - isA, hasA, usesA, produces
	
	

	

	Day 20
	-------------

awaiting d 1 Anand Cdac -5 - Yawatmal
pending d 2 Akash M - Cdac - 6	- Solapur
done  3 Sahana - J2ee course - 7 - excpetion handling - karnataka
done d 4 Vishal2 - C++ / why multiple inheritance / operator overloading 6.5
done d 5 atlan jose - EE - Coimbatore - Tamilnadu - 6
done d 6 sujitha - telangana - CS - 6 - threading - sync - 
laptop d 7 sowjanya - EE - 5 - threading - collection - AP
pending d 8 akshay - 6 - nanded
done d 9 sagar - nagpur - cdac - 6 - threading - collections
done d 10 nikitha - AP - CS - btech - 5 - "python - html - css done " - Threading - collection
done d 11 karthik - Btech EE - core java done -  6 - reflection API - AP
done d 12 Aditi - solapur - CSE - 5 - 
done d 13 gaurav - MP - cdac - 6 - menchanical - multithreading - exception handling
done d 14 sunidhi - mp - bhopal - EE - cdac - 5 - 
done 15 Kavya - btech IIIT - CS - mtech - data science - 6 - Hyderabad - hands on 
pending   16 Venkata - CS - AP - 5 
done d 17 Kala - Tamilnadu - MCA - 5 
done d 18 Akash Patil - CDAC - EE - 6 - Nagpur 
pending d 19 Saurabh - MCA - cdac - 6 collections - generics - autoboxing - UP
pending d 20 Sajag - EE - cdac - collection - thread - 6 - MP










		the word "water" is not the actual water


			    self
			     | assignments/ case study / project
			     |
		Knowledge - apply - Wisdom
		|			|blood and gut - u felt it 
		read			self experience
		learn
		see
		hear

10,000 - 55 MCS - C ++, JAVA full stack - Oracle - Unix Shell 
				scripting

		physical mental emotional spritual
		|	 |	|	  |
		1	 2	3	  4


	KNOWLEDGE + VISION + LEARNING ATTITUDE

			Java Technology  5+ 
				|
	------------------------------------------------------
		|		|		|
		JSE		JEE		JME
		desktop		internet	mobile
		|		|RC|HA|MT|POOL|CACHE|TM|
	Core Java		------------------------------
				|			| FlightEnquiry
language fundamentals		|			| FlightTicket
oops concepts			WEB			E->Java Beans
 isA hasA usesA producesA	|			| "Class"
packages			Servlets	-----------------
exceptions			JSP		|	|	|
threading			Struts		Session	Entity	Message
generics			|		  |	  |	    |
Collections	Angular at client side	-------------	--------   -------
file i/o	ReactJS at client side	|	|	 |     |   |    |
jdbc				    Stateless Stateful   BMP  CMP SMS   MAIL
|			   BEFORE REGISTER  AFTER LOGIN  jdbc orm phone gmail
Advanced Java	 airindia  ------guest  - registered - purchase ticket
|		 bookmyshow 
Socket programming
Networking - java.net
RMI
	

"Enterprise application server" will offer all these 7 features	
		| write your code = e + your code
	--------------------
	|

	Any shopkeeper - main board - Ramesh Enterprise h/w store
				7 am to 11 am

		Sunidhi enterprises

	Enterprise Edition 


 7 features of an application - which makes it as an enterprise application

	<----------cluster node-------->
Bank's [Server1|Server2|Server3|Server4] Machine - Bank Application
				| 
	-----------------------------------------------
		|	|	|	|	|	
[clients]-->	PC	ATM	Visa	Phone	SmartPhone
		|	|	|	|	  |	
		IE	cash	cc/dc	IVR/sms	 android app
		Chrome			
		NN		
		Safari
		Mozilaa


1. Remote capability - why first feature is the first feature??
	- socket programming
	- Socket sock1 = new Socket(IP1,port1); <-- machine1
				     |
	- Socket sock2 = new Socket(IP2,port2); <-- machine2

	
	
2. High Availability - 24 X 7  366 days 
	- clustering - heart beating algorithm 


3. Multithreading / Multi processing 

	CPU1
	|
	Thread t1 = new Thread();	t1.start();
	Thread t2 = new Thread();	t2.start();
	Thread t3 = new Thread();	t3.start();

4. Pooling of resources - before sign up (register)
	POOL - common set of resources 

		paper cups for the tea - in a set 
		Tea vending machine - paper cups IN THE POOL

5. Caching of resources - after signup - go for sign in (login)
	CACHE - PK - u are with your "own paper cup" with a Tea/coffee
		PK - he is with his "own paper cup" with a Tea/coffee
		PK - she is with her "own paper cup" with a Tea/coffee

		table - enjoying coffee/tea

6. Transaction management - Atomicity Consistent Isolation Durable

		icicibank.com
		|
		sign-in ( login with your internet userid /password)
	-----------------------
	|
	DASHBOARD - 50000 -> 45000  --- rollback and commit
	|
	Transfer
	|
	select the payee - Seema / or add Seema as a payee
	|
	fundTransfer - from your account to Seema's account
	|					30000 -> 35000
	5000
	|
	asking for OTP - over phone/email - 180 seconds
	|
	5000 debited from your account - 
	|
	sms saying the debit - and credited to Seema's account

	50000			30000
	|			|
	db			db
	|select			|select
	|update			|update
	|select			|select
	ICICI			HDFC
	|			|
	SOWJANYA		SEEMA
	|			|
	5000	----------->
	|			|
	45000			33000


	Akash			Sachin
	Samir			SEEMA
	3000


	
7. Security management - https - TLS - otp - bio metric scanning


	



	metaphyscail - logical - rational 

	<-----enterprise---->
	RC HA MT PR CR TM SM  - coca cola  vs  sugar cane juice
						18 amino acids 


first.cpp <-- a c++ code may be with/without a class definition
---------------
#include <iostream>
using namespace std;
int main()
{
  cout<<"\hello";
  return 0;
}
------------------------------
<-- a c++ code may be with a class definition
second.cpp -> compile -> second.obj/o -> link -> second.out/.exe
---------------
#include <iostream>
using namespace std;
class BankAccount
{
	private: float balance;

	public:	
	void withdraw(float amt) {
		balance = balance - amt;
	}
};
int main()
{
  cout<<"\hello";
  SavingsAccount a;   a.withdraw(5000);
  return 0;
}
---------------------------------------	
MINIMUM UNIT OF CODING IN JAVA IS TO "WRITE A CLASS"
<-- the name of the source code 
First.java --> compilation -> 
		Greet.class|SavingsAccount.class|FlightTicket.class
		|
		run -> run the one which has the "main" method
------------------------------------
class Greet  // a non-public class may be saved in any source code
{
	public static void main(String args[])
	{
		System.out.println("Hello Again Java...greeting....");
	}
}
class SavingsAccount { 
	public static void main(String args[])
	{
		System.out.println("Hello Again Java..banking...");
	}
}
class FlightTicket { 
	public static void main(String args[])
	{
		System.out.println("Hello Again Java..airline...");
	}
}
------------------------------------------


WINDOWS       -> set path="c:\Program Files\Java\jdk-16\bin";%path%
linux /ubuntu -> export PATH=/....JAVA JDK PATH... :$PATH


OOPS concepts
================
	procedure/function <=== data
	Procedure Oriented Programming System = POPS
	top to bottom approach	


	Object Oriented Programming System = OOPS
	botton to top approach

	data <=== procedure / function

	saloon <-- ask the barber - hair cut / eye brow


	before class there was structure's concept

	CONTRACT OF A CLASS = ASSOCIATION OF DATA<--WITH FUNCTIONS
	class Employee
	{
		char empName[20];
		char desg[20];
		float salary;
			+
		void showEmployee() { } // READ ONLY CONTRACT
		void changeSalary(float newSalary)
		{
			if(newSalary > (salary+salary*0.20) )
				salary = newSalary; // mutation
			else 
				cout<<"\nsalary cannot be lesser than the current one";
		}
	}
	class Song
	{
		char songTitle[20];
		char songArtist[20];
		int year;
		void showSong() { }
	}
	main() 
	{
		Employee e={"John","Developer",5000};		
		Song     s={"My Heart Will Go On","Celine D",1996};
		s.songTitle = e.empName;
	}


	why to write a class????




	Object = physical state + behaviour(functionality)
SavingsAccount =  balance + withdraw() / deposit() / transfer()

	OOPS

	What is your father??
	REPLY1 : my father is in police! -> FIR/introspection
	REPLY2 : my father is in bank as cashier!!! fundtransfer/dispense cash
	REPLY3 : My father is a doctor - diagnose patient


	String str="john";
	str.toUpperCase();

	1. Abstraction
		it is the "WHAT IS?" part of an object
		it hides the complexity of an object

   	     what is an ATM? - End user - knows to withdraw the cash

		- data abstraction - hiding the data
			private data

		- procedural abstraction = hiding the function
			recordLog() { } - card in/card out log time
			private functions

		- class abstraction
			private nested class 
	
	2. Enpcasulation
		it is the "HOW IS IT?" part of an object
		it is the complexity(coding) of an object

	     How is it(working) an ATM? <-- the ATM Engineer knows it

		data encapsulation - private data
		procedure encapsulation - private functions
		class encapsulation - private nested classes

	class FlightTicket {
		data
		+
		function
	}

	class FlightEnquiry {

	}

	3. Polymorphism
		Ability of a business entity to have multiple forms

		
		i. class extension

			   BankAccount
				| withdraw() { bal = bal - amt; }
				| void print(){ ano name bal}
		-----------------------------------------------
		|			|		|
		SavingsAccount	CurrentAccount	CreditAccount
		|
		|withdraw() { check min bal and then bal = bal - amt; }
		|void print(){ ano name bal rate}
		|
		FixedDepositAccount
		|withdraw() { check maturity year and then bal = bal - amt; }
		|void print(){ ano name bal rate maturity }
		|
		FlexiFixedDepositAccount
		void print(){ ano name bal rate maturity flexiTerm}



				Doctor - every doctor is not a surgeon
				|
		------------------------------------
			|
			Surgeon - every surgeon is a doctor
			|
	----------------------------------
	|		|		|
	HeartSurgeon	NeuroSurgeon	OrthoSurgeon

- every heartsurgeon is a surgeon as well as doctor




		ii. function overloading - compile time decision

			ability of a function to be redefined 
			in the same class or across the hierarchy
			provided the following condition are met

			a. type of parameter
			b. number of parameters
			c. sequence of parameters

		iii. operator overloading - deprecated - obselete
			ability of an operator to have multiple task

			Employee e1 (101,"Julie",5000);
			Employee e2 (102,"Jack",7000);
			Employee e3 (103,"Jane");

			int i = 10 + 20;

			e3    = e1.operator +(e2); // Objects in math expression 
			e3    = e1 + e2; // Objects in math expression 
			f1    = e1 + s1; //abused

			in java, a developer cannot overload the
			operator to miss its core purpose

			internally java does the overloading of
			operators

	class Employee
	{
		int salary;

		Employee operator +(Employee x)
		{
			Employee tempEmp;
			tempEmp.salary = salary + x.salary;
			return tempEmp;
		}
		int operator +(int x)
		{
			int number;
			number = salary + x;
			return number;
		}
	}


	 public static java.lang.String valueOf(int);

			       1    2            3    4
	System.out.println( 10 + 20 + " and is " + 10 + 20 );
			    |  | |        |        |   |
			  int  | int	String   int  int
			       1
			binary +
			       |
			       2
			       |
			    30 + " and is " + 10 + 20 
			
			  "30" + "and is " + 10 + 20 
			       |
 public java.lang.String concat(java.lang.String);
			       |
			 "30 and is " + 10 + 20 
			 "30 and is " + "10"
			 "30 and is 10" + 20
			 "30 and is 10" + "20"

			 "30 and is 1020"



		f1 can be a flight object, s1 can be a song object




		iv. function overiding

			- allow the child class to redefine
			a function with same arguments and 
			return type(Co-variant)

		class Hospital
		{
			Doctor getDoctor() { }
		}
		class EyeHospital extends Hospital
		{
			Surgeon getDoctor() { } //overridden
		}

1. exclusive
2. inherited
3. overridden (first it is inherited)
4. implemented (mandate from its super class)

	4. Inheritance

		ability of a business entity to acquire properties
		from existing business entities

	derivation		 implementation
	|			 |
	A concrete		 A - non-concrete | abstract | interface
	|fun(){..} <-defined	 |fun(); <-- declared | undefined	
	|			 |
	B			 B
	fun(){...}//may override fun(){} must be implemented

		
		a. single level
		b. multi level - linear inheritance
	
		c. multiple level* obselete ( rather use interfaces)
		d. hierarchical level

		A
		| single 
	-----------
	|	|
	D	B
	|      | |
        +------+ |
	|	 | multi-level
	E	 c

	virtual base(super) classes 

				   LivingBeing
					|
	--------------------------------------------------
			|				|
			Animal				Trees
			|breathing();				
---------------------------------------------------------------------
   |		|		|			|
  Fish		Mammal		Bird			Reptile
  |layEggs()	|giveBirth();	 | |layEggs() | fly()	|
  |breathing();	|breathing();	 | |breathing(); 	Snake | Lizard
  |swim() ----------   |	 | ------------------	
Sword |	  |      |     -------------  		|
      -----      Elephant    |  |		Sparrow
        |                    |  Bat*
      Whale*		Unicorn (Honda Bike)
 
	USE ABOVE REFERENCE TO INNOVATE YOUR OWN EXAMPLE 
	TO EXPLORE CLASSES/ABSTRACT CLASSES/INTERFACES
	up to 4 x 4 level extent




		class A
		{
		}
		class B 
		{
		}

		class C extends B,A
		{
		}


	Constructor 
		- is a special function that has the same name
		as of its enclosing class

		class A <-- this class has an implicit ctor|default
		{
		}
		class B
		{
		  B() { 
			super(); // to invoke the super class ctor...
		  } <-- not a default | its an explicit no-arg
		}

		what the use of the constructor?????

		- to initialize the state of the object

		-it is called only once during the object creation time
			
		- once the object is created, it cannot be invoked

		- it can take parameters, hence it can be overloaded

		- it cannot return type | but it can throw exceptions


BankAccount bankObj = new BankAccount();
	|	|	|	 |
	class	ref  allocator  constructor
	
		stack				heap
		|				|
			<----------------data members/fields--------->	
			accountNumber accountHolderName accountBalance
			----------------------------------------------
allocator's job	----->	|0	     | null           	|0.0	     |   
			----------------------------------------------
	   +------------>32780	
	   |				MEMBER METHODS
	   |				-------------------
	+-------+			BankAccount()
	|32780	|			showBankAccount()
	+-------+
	bankObj <-- just a reference

			<----------------data members/fields--------->	
				BankAccount			     |  SavingsAccount	
			accountNumber accountHolderName accountBalance  rateOfInterest
			---------------------------------------------------------------
allocator's job	----->	|0	     | null           	|0.0	     |		      |    
			----------------------------------------------------------------
	   +------------>32820	
	   |				MEMBER METHODS : BankAccount
	   |				-------------------
	+-------+			BankAccount()
	|32820	|			showBankAccount()
	|	|			BankAccount(int,String,double,float)
	+-------+			
	sa <-- just a reference		Member methods : SavingsAccount
					----------------------------
					SavingsAccount(float) { super(); }
					SavingsAccount(int,String,double,float) { super(); }



		 Object -- parent for all
		   |
		Person
		| Person() { super(); }
		|
		Student
		|Student() { super(); }
		|
		Employee --> applies for second job
		|Employee() { super(); }
		|
	' ',"Jack","10-Jan-1995" ,"BE",6.8,    "DBA","LTI",5000
	<----personal---------> <---student---> <--employee-->





super() - must be the first line to invoke a ctor from another ctor

super. - can be anywhere to invoke super class member from any member





	Inheritance of implementation
	------------------------------------
	Abstract classes and Interfaces

	Abstract class


		- a class with optional "partial contract "
		
		- "partial contract " means abstract method

		- abstract means incomplete - just declared/not defined

	e.g.

	abstract class BankAccount { 
		abstract void withdraw(double amt);
		abstract void deposit(double amt);
	}
	class SavingsAccount extends BankAccount //immediate child
	{
		//hence mandate to develop the above abstract methods
	}
	class FixedDepositAccount extends SavingsAccount
	{
		//no mandate to develop the grand parent methods
	}





















	5. Object communication

		B b = new B();
		b.greet();		OR
		
		A a = new A();
		B b = new B();

		a.hi(b); // pass the object 

		b.greet(a);

		class A
		{
			void hi(B b) {
				b.howAreYou();
			}
		}

		class B
		{	
			void howAreYou() {

			}
			void greet(A a) {
				a.hi(this);
			}
		}


		withdraw() { bal = bal - amt; }
		|
ATM server - withdraw()
|
ATM client - withdraw() <-- press 













	Java methods are of four category

	1. exclusive
	2. inherited
	3. inherited-hence-overidden
	4. implemented - mandate from abstract classes/interfaces




		Doctor
                   ^
                  /|\
		   | 
		   |
		   |
		Surgeon


-------------------------------

Assignment1 : innovate overloading to the extent of 7 plus methods
Assignment2 : innovate the class hierarchy like Doctor
		till 3 levels

				Person
				|
		----------------------------
		|		|	|	|
		Student		..	..	..
		|
		Employee	
		|
		Executive
		|
		Manager



	Naming convention
	-------------------------

	ClassName	-	DriverManager - PascalCase
	methodName	-	speedToTest()   - camelCase
				setLookAndFeel()
				setlookandfeel()

	variable names	-	rollNumber
				empployeeId
				distanceBetweenTheEarthAndTheSun

	CONSTANTS	-	PI, MAX, MIN, SPEED_OF_LIGHT

	packages	-	java.lang, java.awt,  java.awt.event




			godisnowhere

			GodIsNoWhere
			GodIsNowHere








		

	class Machine
	{
		int machineNumber; // unique id 
		String manufacturer; // creator
		
	}
		          A s s o c i a t i o n

	class CardReader {
		void scanIt(Card c) {
			//doing some physical scanning of card digits
		}	
	}
	class AtmMachine extends Machine //isA
	{
		CardReader reader = new CardReader(); // hasA

	 producesA		      usesA    usesA   usesA
		|		       |	  |	   |	
		Bill acceptCard(Card crd, double amt, int pin) // using Card object in the argument
		{
			reader.scanIt(crd); //hand over the card to scan
			Bill b = new Bill();
			return b;
		}
	}

	class WashingMachine extends Machine //isA
	{
		WashingTub wt = new WashingTub(); //hasA - central/fatal part of this machine

		producesA	<----- usesA   usesA    usesA    usesA --->
		|		|		|	   |	  |
		Cloth[] wash(Cloth c[], WashingPowder wp, Water, Electricity e) 
		{
			....
			...
			rinse();
			...
			spin();	
		}
		void spin() { }
		void rinse() {}
	}




			Machine
			|
	-------------------------------------------------
		|		|		|
	ATMMachine	   WashingMachine	MicrowaveMachine
	  CardReader	 	WashingTub		HeatingCoil
				HeatingCoil

		Rahul Gandhi -> put potato in a machine
						|
						gold coin


	Quantum formula to "create anything" in this world


		invisible			visible
		unmanifested			manifested

		frequency 		= frequency 
	Thought + eMotions		=  Action + Result
	|	    |			= 
	faster	 feel it +/- tive	    coding + result
	than 
	light
	|
	invisible
		
	

	Villager
	   |
	---------------------
	|isA		|isA
	Farmer		Politician 
	|		|
--------+		----------
|isA				|isA
PoliticianFarmer		Village X

	class Village
	{
		Villager v = new Villager(); //hasA
		Farmer f[] = new Farmer[10];
		Politician p1 = new Politician();
		PoliticianFarmer p2 = new PoliticianFarmer();
	}
		


	Interfaces

		- is a pure partial contract of a class

		- all methods of it are public abstract
		
		- all fields are public static and final


		interface Payment
		{
			void pay(); // pure partial - abstract,public
		}

	class GooglePayment implements Payment
	{
		void pay() {
			
		}
	}
	class CardPayment implements Payment
	{
		void pay() {
			
		}
	}
	class ChequePayment implements Payment
	{
		void pay() {
			
		}
	}
	class CashPayment implements Payment
	{
		void pay() {
			
		}
	}


	
			BankAccount
			|concrete class
	---------------------------------
	|
	|
	|extends
----------------+  WithdrawService | pure abstract | interface
		|  | withdraw(float);
		|  | implements
		|  |
		|  | DepositService | pure abstract | interface
		|  | |deposit(float);
		|  | |implements
		|  | |
	  SavingsAccount





	is "Sachin Tendulkar" an object or a class?

	class Player { }

	class Cricketer extends Player //isA
	{
		String batsmanName;
	
		Cricketer(String name) {
			batsmanName=name;
		}
	}
	
	Cricketer cr1 = new Cricketer("Sachin Tendulkar");
	Cricketer cr2 = new Cricketer("Virat");
	Cricketer cr3 = new Cricketer("Dhoni");

				
	class SachinTendulakar
	{
		int age;
		long score;
		String address;		
	}
	SachinTendulakar s1 = new SachinTendulakar(40,12000,"Mumbai");
	SachinTendulakar s2 = new SachinTendulakar(30,2000,"Delhi");


when you have partial knowledge/hint -> abstract

our mother Earth is also a vehile - 1 miles per hour

	interface Vehicle -> think of opposite of vehicle
	{
		move();
	}
	abstract class FlyingVehicle extends Vehicle
	{
		flyInTheSky();
	}
	abstract class LandVehicle extends Vehicle
	{
		moveOnRoad();
	}
station1			station2
    |				|
land|ropeway 			|land
    +===========================+ earthen wires | in the sky attached
		|
	    cart/trolley
		sky| land    

class Cart extends LandVehicle		class Bicycle extends LandVehicle {
{

}					}

Paalaki

class Car 		class MotorBike extends Bicycle
			{
	
			}

	abstract class RailVehicle extends LandVehicle
	{
		moveOnRailTrack();
	}

	abstract class SeaVehicle extends Vehicle
	{
		moveOnOcean();
	}

	class Car	it is not truck | flight | train | ship | boat
	{
		drive();

	}
	class SedanCar extends Car
	{
		String modelName;

	}
	class Maruthi { }
	class Honda { }


	SedanCar c1 = new SedanCar("Maruthi");
	SedanCar c2 = new SedanCar("Honda");
	SedanCar c3 = new SedanCar("Skoda");


	Honda h1 = new Honda("Civic");
	Honda h2 = new Honda("City");
	Honda h3 = new Honda("Swift");

(collection of abstract classes and interfaces )
Framework = semi-developed application


Implementation of the Framework

Guitar	Violin	Veena  Flute  BAgPiper Trumpet Tabla  Dholak  Duff		Cutter Needle		ECGmachine	GlucoMeter ....
										cut();  poke()	   measureHeartBeats();	 readSugarLevel()		












					1			    Instrument	<-- interface	
									| use();
					-----------------------------------------------------------------------
					|								|
			2	MusicalInstument						MedicalInstument			Wooden....	Electrical....	......
					| playMusic();							|operate();
	------------------------------------------------------------------			----------------------------------------
	|				|				|			|				|		
3 StringBasedMusicalInstrument	AirBasedMusicalInstrument	DrumBasedMusicalInstument	SurgicalMedicalInstrument	PathologicalMedicalInstruments
	|tuneStrings();			|				|			   |steralize()			|reader()
-----------------------		------------------------	------------------------	----------------	---------------------------
|	|	|		|	|	|		|	|	|		|	|		|		|
Guitar	Violin	Veena ...	Flute  BAgPiper Trumpet ...	Tabla  Dholak  Duff		Cutter Needle		ECGmachine	GlucoMeter ....
												cut();  poke()	   measureHeartBeats();	 readSugarLevel()		






	============================================================
			field		method		class
	============================================================

	final		CONSTANT	cannot be	cannot be
					overridden	extended

	------------------------------------------------------------

	static		shared		to refer the	can be the 
			data across	other static	nested class
			the instances	members

	------------------------------------------------------------

	abstract	NA		partial		contains
					contract	partial
							contract
	------------------------------------------------------------



				------------------
				|radius	| PI	|
				------------------
				|45.89	|3.14	|
				-----------------
	----------------------->100
	|			
	100
	|	
	c1


				------------------
				|radius	| PI	|
				------------------
				|35.19	|3.14	|
				-----------------
	----------------------->200
	|			
	200
	|	
	c2

				------------------
				|radius	| PI	|
				------------------
				|15.39	|3.14	|
				-----------------
	----------------------->300
	|			
	300
	|	
	c3

=================== after PI as static ===================
	

				PI <-- static (shared)
				-------
				|3.14 | final <-- read only
				-------

				---------
				|radius	|
				---------
				|45.89	|
				---------
	----------------------->100
	|			
	100
	|	
	c1


				---------
				|radius	| 
				---------
				|35.19	|
				---------
	----------------------->200
	|			
	200
	|	
	c2

				---------
				|radius	| 
				---------
				|15.39	|
				---------
	----------------------->300
	|			
	300
	|	
	c3


----------------------but in which scenario we want final data
		to repeat with every object ??? ------

------------------

	
				---------------------
				|carModel| NumPlate |
				---------------------
				|Maruthi |TN-01-6363|<-- constant
				---------------------
	----------------------->100
	|			
	100
	|	
	c1


				---------------------
				|carModel| NumPlate |
				---------------------
				|Honda   |UP-02-1515|<--constant
				---------------------
	----------------------->200
	|			
	200
	|	
	c2


				---------------------
				|carModel| NumPlate |
				---------------------
				|Honda   |MH-02-9393|<--constant
				---------------------
	----------------------->300
	|			
	300
	|	
	c3
				






		Object class as a Parent to all the classes
		|
		11 method
		|
	every java developer must know these methods

	1. equals() - to compare objects for equality
	2. hashCode() - hash code of the object

	3. toString() - object as string

	4. clone() - cloning
	5. getClass() - relfection - final

	6. wait() - interthread communication - final
	7. wait() - interthread communication - final
	8. wait() - interthread communication - final
	9. notify() - interthread communication - final
	10. notifyAll() - interthread communication - final

	11. finalize() - gc 

-------------------------------------------------------------------



	Packages

		= similar to operating system directories/folders


		WINDOWS			UNIX/LINUX

1		MyComputer		/
		|			|
	--------------------	----------------	
2	|		|	|
	C:		D:	home
	|		|	|
3	vishal		jack	vishal <--- packages / folders
	|		|	|
	net		sql	gui <-- sub packages / folders

c:\vishal\net  c:\jack\sql    /home/vishal/gui

   vishal.net	jack.sql    vishal.gui  . is the separator


package must be the first line of any source code



			d:\
			|
		---------------------
		|
		javatraining1
		|
		PackageProject
		|
		jungle
		|
	---------------------------
	|	|	|	
	cave	tree	river
	|	|	|
	Tiger	Bird	Crocodile

			

	There are four access specifiers


		1.        <--- blank means default/friendly/accessible
				only within its own folder/package

		2. private <-- only within its scope { }, 
				ie within its own class

		3. protected <-- within its own package to nonsubclass

			     <-- can be referred by its child class
				 via extends gateway 

			<-- not available to the child class via
				its super class handle
								

		4. public <-- available to the internet/everybody










	Banking Project

		a. Register with the bank
		b. as a user  - Apply for Account opening

		c. Admin will approve your account

		d. You get userid, password (mailed)

		e. log in 
		
		g. u see ur dashboard

	Account summary		Transfer		Statement	
		|		|			|
	ur balance is seen	see the payeelist	monthly
				|			quarterly
			select one of the payee		Yearly
			and transfer funds to		stipulated period
			that payee




	1. database tables are involved
		account <---table
		acno 	name 	balance
		101	Jack	50000


	2. java classes to represent your tables are involved
		Account <--class

	3. AccountRepo <-- DAO <-- Data access Object
		|
		insertAccount(..) -> insert query fired to account table
		updateAccount(..)-> update query....
		deleteAccount(..)
		viewAccount() -> select query

	4. AccountService <-- will invoke DAO
		openBankAccount() { .... insertAccount(..) ... }
		changeBalance() { .... updateAccount(..) ... }
		findBalance() { ..viewAccount().... }

	5. Spring Controller Code
		AccountService 

	6. HTML CSS + JS 

	html pages... ( 8 to 9 pages + css for decoration)
		js for validation 









============================================================

Layer 1 : DB layer - all project tables are here
--------
    create table bankaccount		user |  payee | 
    (
      acno number primary key,
      acholder varchar2(20),
      acbalance number
    );

	insert into bankaccount(101,"jack",50000);


Layer 2 : POJO - Plain Old Java Object - such few pojos
----------
	class Account 
	{
		int accountNumber;
		String accountHolderName;
		float accountBalance;
		Account(int a, String n, float b) {
			accountNumber = a;
			accountHolderName=n;
			accountBalance = b;
		}
	}

Layer 3 : DAO - Data access Object - abstraction to JDBC code
---------
	interface AccountRepo
	{
		void addAccount(Account a);
		Account viewAccount(int acno);
		void updateAccount(Account a);
	}
	class AccountRepoImpl implements AccountRepo
	{
		void addAccount(Account a) {
			actual jdbc code to insert a into the table
		 }
		Account viewAccount(int acno) { 
			actual jdbc code to select acno from the table
		}
		void updateAccount(Account a) { 
			actual jdbc code to update the table for a
		}

	}
------------------------------------------
Layer 4 : business SERVICE layer

	interface AccountService
	{
		void findAccountService(int acno);
		void updateAccountBalance(int acno, float bal);
	}
	class AccountServiceImpl implements AccountService
	{
		AccountRepoImpl  accRepo = new AccountRepoImpl();

		void findAccountService(int acno) { 
			...some logic....
			accRepo.viewAccount(acno); //CONNECTING TO LAYER 3 
			...some logic....
		}
		void updateAccountBalance(int acno, float bal)
		{

		}
	}

Layer 5 : Controller layer
---------------------------------

	class MyServlet
	{
		AccountServiceImpl accService = new AccountServiceImpl();

		@RequestMapping("/find")
		void findAccount(int acno)
		{
			accService.findAccountService(acno);
		}
	}
-------------------------------------
Layer 6
	HTML page
	<form action="/find">
		Enter your acno <input type=text name=acno>
		<input type=submit name=submit>
	</form>


======================================
Day 4


	
	Exception handling


			Errors
			|
	-----------------------------------------------------
	|	   |	   | 		|	 | 
	compile  linker   runtime	fatal	logical
	|	 |	  |		 |	  |developer
	syntax library   Exceptions	Atm OOO  a+b = 8
			  |
		program is running
		and u get the error


		Exception = runtime error 




	your java code (2) uncaught
		|
	int div = 100 / 0 ;  --> JVM <-- intangible machine/software
				  |
(3)  rethrown			if the deno is 0 then
				ArithmeticExcpetion e = new ArithmeticExcpetion("/ by zero");
				throw e; (1)
			else
				  | (4) drops it with termination
			     CPU <-- tangible machinemachine/h/w



	BEFORE THE BIRTH OF TRY AND CATCH...
	WORLDWIDE IF AND ELSE IS/WAS USED 


psuedocode here

	jungle of if - clarity of the code is lost
	where the business??? where the error handling logic???

		

	void fundTransfer(source, target, amt) // jungle of if 
	{
	     find target
		if target exist
		then
			find source
			if source exist
			then
				check balance of source
				if source balance > amt
				then
					withdraw from source
					deposit to target
				else
					insuff balance at source
			else
				source not found
		else
			target not found
	}

	void fundTransfer(source, target, amt)
	{
	     find target
		if target does not exist
		then
			target not found
		else
			find source
			if source does not exist
			then
				source not found
			else
				check balance of source
				if source balance < amt
				then
					insuff balance at source
				else
					withdraw from source
					deposit to target
			
	}


	void fundTransfer(source, target, amt) // jungle of if 
	{
		try
		{
 		 1	find target
		 2	find source
		 3	check balance of source
		 4	withdraw from source
		 5	deposit to target
		 6	commit the transaction
		}
		catch(if target does not exist)
		{
			target not found
		}
		catch(if source does not exist)
		{
			source not found
		}
		catch(if insuff funds at target)
		{
			insuff balance at source
		}
		
	}
			     Object
				|
			  Throwable
				|
		--------------------------------
		|			|
		Error		   Exception
					|checked (except the RuntimeException)
		-----------------------------------------------------------------------------------
		|		|		|		|				|
	RuntimeException	IOException	SQLException DrivingLicenceException	SourceNotFoundException  TargetNotFoundException
	|unchecked 
--------------------------------------------------------------------------------------
|		     |		|	|   |			|		|
ArithmeticException  |		|	| RedSignalDishonouredException	FlatTyreException		InsufficientBalanceException
	NullPointerException	|	|
				|	|
		IllegalArgumentException|
				|	|
		NumberFormatException	|	
					|
		    IndexOutOfBoundsException 
				|
	--------------------------------------------
	|				|
 ArrayIndexOutOfBoundsException   StringIndexOutOfBoundsException 







	void fundTransfer(s,t,a) throws SourceNotFoundException, TargetNotFoundException
	{

		if ..
			throw TargetNotFoundException

		if ...
			throw SourceNotFoundException

		
		if ....
			throw InsufficientBalanceException
	}







	During a car's journey

		following problems might arise
	
	shortDrive			longDrive
	1-5				1-50
		RCBookNotFoundException
		DrivingLicenceNotFoundException*
		PUCNotFoundException
		InsuranceCopyNotFoundException
					InsufficientFuelException
		TrafficPoliceCaughtException	| Camera	 
		SpeedLimitException	| Camera
		
		RedSignalDishonouredExcpetion*	| Camera	
		FlatTyreException*
		EngineFailureException			

					StepneyPuncturedException
		
		
		
class InvalidOpeningBalanaceException extends Exception
{
	InvalidOpeningBalanaceException (String s) { super(s); }
}
class InsufficientBalanceException extends RuntimeException
{
	InsufficientBalanceException (String s) { super(s); }
}

class Account
{
	acno,name,bal;

	Account	(a,n,b) throws InvalidOpeningBalanaceException 
	{
		if(b<5000) {
			InvalidOpeningBalanaceException e =
				new InvalidOpeningBalanaceException ("Account opening balance must be more than 5000");
			throw e;
		}
	}
	void withdraw(float a ) {
		if(a < bal ) {
		InsufficientBalanceException e = new 
			InsufficientBalanceException ("Insuff funds to withdraw");
			throw e;
		}
	}
}
class Test
{
	main() {
		try
		{
			Account a = new Account(10,"jack",80000);
			a.withdraw(90000);
	
		}
		catch(InvalidOpeningBalanaceException e) {
			sop(e);
		}
		catch(InsufficientBalanceException  e) {

		}
		
	}
}


	try
	{
		open file 1
		open file 2
			open socket1
			open socket2 <=== if there is an exception
				start thread 1
				start thread 2

					some logic....
					some logic.

				stop the thread 2		
				stop the thread 1
			close socket2
			close socket1
		close file2
		close file1
	}
	catch(Socket problem .....) { }
	finally {
		smart logic has to be written here to close
		appropriate resources which are opened ....
		close file1, close file2, close socket1
	}


Thread - series of instructions 
==========

101 Suresh 62000 if t1 wins the race, then t1 will keep a bookmark 
		there, indicating that s/he is busy with this record
		-dont refer this value until the bookmark is removed
		(t2  is in queue, awaiting for t1 to complete)
		and last is t3 awaiting for t2 and t1 to finish
			
102 Dinesh 60000
103 Haresh 70000
103 Ramesh 80000
....

		D e p o s i t    C o u n t e r <== One Process 

	Thread1			Thread2			Thread3
	|			|			|
	Teller1			Teller2			Teller3
	|50000			|55000			|62000
	getBalance(101)		getBalance(101)		getBalance(101)
	|			|			|
	calcAmount()		calcAmount()		calcAmount()
	|55000			|62000			|70000
	setBalance(101);	setBalance(102);	setBalance(103);		
	|			|			|
	Customer1		Customer2		Customer3
	|			|			|
at     :10:30am			10:30am			10:30am	
cash   :5000/-			7000/-			8000/-
deno.. :500Rs 			100Rs			2000Rs
count  :10			70			4
For a/c:101			101			101


	how to solve this in non-computerized (manual) banking

	synchronized 





How to make a simple thread

		
				Runnable
				|run(); //declared				Frame
				|						| GUI features
		-----------------------------------------------------------	------
			|implements 			     implements	|(a)	|extends
			Thread						|	|	
			|run(){  }//not doing anything			|	|
			|start() {  run(); } ---------->JVM Thread	MyMessageFrame
		---------------------			 Scheduler	  (b)	run() { } //mandate
		|extends (1)			         RoundRobin 
	    MyMessage
		|
		run() { } //override (2)

	(3) instantiate this MyMessage
	(4) invoke the start() method of this object, which
		invokes the run method of MyMessage


	I. First Way - EXTENDING THREAD CLASS
		a. extend from java.lang.Thread class
		b. override the public void run() method
			and put your logic which will participate
			in multithreading		
		c. create the object of your class of step (a)
			
		d. invoke the start() method of this object
			which invokes the run() method


	II. Second Way - IMPLEMENTING RUNNABLE INTERFACE
		a. implement from java.lang.Runnable interface
		b. implement the public void run() method
			and put your logic which will participate
			in multithreading
		
		c. create the object of your class of step (a)
			it does not have start() method (since it is
			not the child of java.lang.Thread )

		D. Hence instantiate java.lang.Thread class, and to its
		constructor pass the object of step (a) because it is 
		a Runnable object too.

		d. invoke the start() method of this object of step (d)
			which invokes the run() method




	Priority of Thread


		Min 1		Norm 5		Max 10
		<------------------------------------->
				|
				default
	static	MIN_PRIORITY	NORM_PRIORITY	MAX_PRIORITY
	final



Assignment :

	Innovate 3 checked exceptions
	Innovate 3 unchecked exceptions

	Innovate a thread example via METHOD 1 - Thread way
	Innovate a thread example via METHOD 2 - Runnable way


	I want the GITHUB LINK FROM YOUR SIDE FOR ALL THE 
	ASSIGNMENTS DONE SO FAR.....
	
	




	



















