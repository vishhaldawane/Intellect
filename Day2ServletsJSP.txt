


		Servlets JSP - api
		|
		to generate "dynamic web" output


		Web output at client		web output from server
			|				|
	----------------------------------	-----------------
		|		|			|
		static		dynamic			dynamic
		|		|			|
		html		with javascript		ServletsA --> databaSe
							|
						RESPONSE+
							|   |
							|  ServletB
							|	
					input from the customer/REQUEST

 RMI

Enterprise applications
--------------------------
RC HA MT POR COR TM SM		

					MyBankingProject
					|
				---------------------
				|		|
				index.html SavingsAccountServlet.java
				|		 |
			this file will be	this class is NEVER
			transported/		transported/copied
			copied at the		to the browser..!!!
			browser | runs		only the OUTPUT
			locally at		generated by this is
			the browser machine	sent to the client/browser
			|
					JDBC --> fetch balance -> DB
			Server		|
			 |			SavingsAccountServlet.class
			 |			ScoreServlet.class
			 |			StockServlet.class
			 |Proxy p1 =
			 |s1=Socket(Ip+port) 192.168.0.1:9090
			 |  +
			 |t1=Thread
			 |p2, p3
			 | apache + tomcat
			 |WebServer + ServletContainer
			 |Reception <=> Operation | Doctor | Nursing|Trauma |Patha...
			 | p1, p2, p3...p1000
	---------------------------------
		|	 |		|
		|Proxy	 |Proxy		|Proxy
		|socket	 |socket	|socket
		|ip/port |ip/port	|ip/port
		|  +	 |+		|+
		|thread	 |thread	|thread
		client1	 |client2	|client3
		|	 |		|
		Browser	Browser		Browser
		|	 |		|
	Customer1	Customer2	Customer3
	getBalance()	getScore()	getStock() <-- request
	|		|		|
	banking		sports		stock


	APPLICATION LAYER
	PRESENTATION LAYER
	SESSION LAYER - HTTPS
	TRANSPORT LAYER
	DATA LINK LAYER
	NETWORK LAYER
	PHYSICAL LAYER

  "Rajesh Sharma" is known as "raja" or "raju" or "raj"
	|	   <-- is it registered in bank/company/stock"
	
	<-----------------REQUEST ---------------->
	<-------apache ----->|<----------tomcat---->
	http://ipaddress:8080/BankingProject/savAcc <--preconfigured
	http://ipaddress:8080/BankingProject/score <--preconfigured
	http://ipaddress:8080/BankingProject/stock <--preconfigured
		<--machine-->
	 |      |         |      |		 |	names
	 |	+---------+      |		 |
  protocol         Socket   ProjectFolder   webResource/urlpattern
				|
	"Web Application" Folder's Standard Structure for Java
				|
			BankingProject
				|
		------------------------------------
		|		 |		|
		WEB-INF		static pages	dynamic pages
		|		*.html/css/js	*.jsp 
	-----------------------
	|	   |	   |
	classes	  lib	web.xml <--deployement descriptor
	|	   |	     |		
YourServletHere   *.jar(s)   |
SavingsAccountServlet.java   |
	|                    |
SavingsAccountServlet.class<-+ entry is created for this file


	On ATM <-- do u have a browser? NO
	Visa Card machine <-- <-- do u have a browser? NO
	Phone sms banking <--<-- do u have a browser? NO
	SmartPhone app <<-- do u have a browser? NO

	NetBanking <--- <-- do u have a browser? YES

	Customer Care		Railway Ticket Counter
				|
				queue
				|
				1
				2
				..
		pc	<--	8 -> mobile phone | APP
	irctc.com
	website
	|
	browser
	|
------------------
|		| your ticket is booked / or not booked / train not available
static		dynamic
|
enter your source
enter your dest
enter journey date
no p :
submit

		---------------------------------
		|				|
		|	BankApplication		|SelectTest.java
		|		getBalance() -----------> DB
		|				|
		---------------------------------
				|
				| must be ready to process both
				| http  and non-http request
				|
				|Enterprise "Application Server"
		 -------------------------------		
		 | web Container| EJB container	|
		 -|---------------------|--------
		  |			|rmi	- CORBA
		--|---  ----------------------------------------------------
		|	|	|	|	|		 |	|
		PC	ATM	VISA	Phone	SmartPhoneClient Email  Phone
		|	<------------non http request---------->	IVR
	   Browser						      186100.519 
	    |							One.mp3 Lac.mp3 Eighty.mp3 Six Thousand.mp3 One.mp3 Hundred.mp3	
 https://icicicbank.com						AI
	 <--machin--->
	   ip + port
 	    Socket

 "hypertext" transmission protocol
	|	|	    |
	|	|	set of rules
	|     A<->B
	|
more than the normal

		Click Here

	a.html --> browser
	|
	<a href="http://google.com"> goto google </a>

	 goto google



	



	
	Develop		vs	Deploy [ production ] - real time
	|			|
	coding			runtime
	|			|
	flight at runway	in the sky
	|			|
	Coding for ATM		ATM in use





	YourServletHere   - how to make it

	Servlet = to generate dynamic web output
					|
		      debit card transaction successful
		      debit card transaction failed
			cricket score in a live match
			stock information is dynamic
			weather info dynamic 
			

			Servlet <--interface
			 | init(),service(),destroy()
			 | getServletInfo(), getServletConfig()
			 |
	-----------------------------------
		|I.
abstract   GenericServlet
		|except the service() all methods are defined here
 ------------------------------------
	| 			|II.
YourServletIsHere	 HttpServlet	<-- concrete class
  |				|
service()<-mandate   -----------------------------
				|
			  service()<-mandate  too 
			    |
			------------
			|	|
			doGet()	doPost()    
			<--exclusive--->


	1. servlet must be in a package
	2. servlet must be in a public access specifier
	3. must have public no-arg constructor
	4. must have service() method implementation

Requirement
-------------------
	1. Apache tomcat9
	2. jdk1.8 above - javac
	3. Servlet/JSP API - inside apache
	4. Browser 



		Eclipse
		|
	----------------------
	|		|
Java SE Developers	Java EE Developers

	
	
		
	ContentRoot				ContentDirectory
		|				|
	MyBankingProject		     "WebContent"
	|					|
customer/client				coders/writer/developers
	|					|
http://ip:port/MyBankingProject		in eclipse environement
	|					|
	deployement path			development

http://localhost:8085/MyBankingProject/
			|
			web.xml
			|
		welcome file is configured
			|
		it accessed the index.html

			|
		
--------------------------------------------------------


	what is xml????  extensible markup 


paper + pen = emotions + write it
|	 |
mobile  whatsapp + emoji + type 


	loveletter.txt
	|
	Dear Java
	
		

		I am treating you as my girlfriend.

		You have been quite for many years.

		And I am the only one kept talking.

		And I m being paid also for it.

		and by the way your version kept incresing.
	
		and my money too.

		I have been observing you from the version 1.2

	

	Regards,
	Vishhal
	How are you?
	
	loveletter.xml  - describe the data in a "standard" manner
	-----------------
	<letter  .....letter.xsd  ... dtd>

		<salutation> Dearest Java </salutation> 

		<enquiry> How are you? </enquiry> 
		
		<main-content>

			
			<special-message> my girlfriend </special-message>

			<tenure> 15 years <tenure>

			<talk> keep it up </talk>

			<reward> paid </reward>
			
		<main-content>

	<conclusion> 
		Vishhal</conclusion> 
	</letter>




	Step 1.	a) download below file and copy to src/main/java
		https://github.com/vishhaldawane/Intellect/blob/main/
			EmployeeEnquiryServlet.java

		b) download below file and copy to src/main/webapp
		https://github.com/vishhaldawane/Intellect/blob/main/
			findEmployee.html
	Step 2:
		a) add the entry in web.xml as below
		<servlet>
		    <servlet-name>EmployeeEnquiryServlet</servlet-name>
		    <servlet-class>myemp.EmployeeEnquiryServlet</servlet-class>
		  </servlet>
		  <servlet-mapping>
		    <servlet-name>EmployeeEnquiryServlet</servlet-name>
		    <url-pattern>/emp</url-pattern>  </servlet-mapping>

	Step 3: copy ojdbc6_g.jar in the WEB-INF/lib folder (oracle)
		copy mysql.jar in the WEB-INF/lib folder (mysql)
		copy hsqldb.jar in the WEB-INF/lib folder (HSQL)

		
	
Assingment:

1.	Enter the employee number : 7839

		it will show all the details

		and modify the job and salary
		
		hit update button -> the job and salary of that
		emp 7839 must be changed

2.	Enter the employee number : 7839

		directly delete this employee number


				   employeeCRUD.html
					|
	-----------------------------------------------------------
	|			|		|		|
findEmployee.html | findAllEmployees.html | updateEmp.html | delEmp.html
	<a ref		<a href			<a href		<a href
	|			|		|		|
	---------------------------------------------------------
					|
					/emp servlet is hit
					|
	submit		submit			submit		submit

		if else if else if else if else



--------------below code for date format from html to db -------------

	String date = request.getParameter("datefieldofhtml");
	java.util.Date doj = new SimpleDateFormat("yyyy-MM-dd").parse(date);
	System.out.println("DOJ "+doj);
	java.sql.Date joining = new java.sql.Date(doj.getTime());
	
	System.out.println("JOINING : "+joining);

	pst.setDate(5,joining);			
=====================================


	Fat Servlet - Fat Controller

		EmployeeServlet



	Imagine Rajesh has started his own hotel business

		

		1. Chef
		2. order collector
		3. food server

1. M V C 

	=============================
	Kitchen
		2. Rajesh as Chef
	db connection | select * from emp, select * from emp where..
			update emp set. .., delete emp where....
			insert....
	=============================
	    Entry Restricted

     html coding 			"request.getParameter"
3. Rajesh as FoodPresenter		1. Rajesh as OrderTaker
	|				|
	|		Dining area --> to collect the request
	|				from the customer 
	|		 --------------------
	+------->	/                   /|
			-------------------- |  Customer1 demand is
			|		   |	MeduWada/Idli/Dosa


===========================================================

=======================================================
In java there are 23 design patterns

2.	M V C 
	---------

	Kitchen
		DAO = data access object [ to hide the kitchen from
					the controller ]

	<-----------dao design pattern------------>
	Employee	EmployeeDAO	EmployeeDAO

	2. Ramesh is Chef = [ M O D E L ] <-- DATA 

	db connection | select * from emp, select * from emp where..
			update emp set. .., delete emp where....
			insert....
	=============================
	    Entry Restricted
[ V I E W ]				[ C O N T R O L L E R ]
     html coding 			"request.getParameter"
3. Rajesh as FoodPresenter		1. Rajesh as OrderTaker
	|				|
	|		Dining area --> to collect the request
	|				from the customer 
	|		 --------------------
	+------->	/                   /|
			-------------------- |  Customer1 demand is
			|		   |	MeduWada/Idli/Dosa
======================================================================

In java there are 23 design patterns

4.	M V C 
	---------

	Kitchen
		DAO = data access object [ to hide the kitchen from
					the controller ]

	<-----------dao design pattern------------>
	Employee	EmployeeDAO	EmployeeDAO

	2. Ramesh is Chef = [ M O D E L ] <-- DATA 

	db connection | select * from emp, select * from emp where..
			update emp set. .., delete emp where....
			insert....
	=============================
	    Entry Restricted
[ V I E W ]				[ C O N T R O L L E R ]
     html coding in JSP			"request.getParameter"
3. Haresh as FoodPresenter		1. Rajesh as OrderTaker
	|				|
	|		Dining area --> to collect the request
	|				from the customer 
	|		 --------------------
	+------->	/                   /|
			-------------------- |  Customer1 demand is
			|		   |	MeduWada/Idli/Dosa
					


	MODEL + VIEW + CONTROLLER
	|	|	|
	DAO	JSP	SERVLET

---------------------------------------------------------------


	GenericServlet
	|
	------------------------
	|		|
	MyServlet	HttpServlet
	|		|
	service()	service()
			|
		-------------------------------------
		|DEFAULT	|		
		doGet		doPost		
		|
		+---------------------+
				      |
<-------------------URL------------------>|hidden data also goes to the server
http://ipaddress:8080/BankingProject/stock|

GET
<-----------------------------URL--------------------------------------------------------------------------->
http://localhost:8085/ meta data  |MyEmployeeProject2/emp2?myempno=7839&newjob=PRESI&newsalary=5555&submit=Modify+Employee
		        1024 bytes| <---------------URI-------------------------------------------------------------------->


POST
http://localhost:8085/MyEmployeeProject2/emp2?myempno=7839&newjob=PRESI&newsalary=5555&submit=Modify+Employee|meta data  
		     | <---------------URI------------------------------------------------------------------>|1024 ..........can be above 1024 also ...if u are adding more data ->

	[which browser is used : chrome
	what is the language : english
	encryption : yes
	inflation : zip/bzip
	socket of both theends
	port of both the ends] <-- a definite/fixed size is there
				   of this data (assume 1024 bytes)

	

	while extending HttpServlet <-- never override service 
	method, else doGet doPost wont be called

	either override service    OR	doGet and doPost


-------------------------------------------------------

	Request Dispatcher
	|
		
			Server--+
			|	|
	----------------+	ServletA (/a)
	|			    |
	|			    +------>ServletB (/b)
	|					|
	|					ServletC (/c)
	|						|
	Client------------------------------------------+
	/a

PlaceOrderServlet -> KitchenServlet -> DeliveryServlet--> BillerServlet
ServletA		ServletB		ServletC	ServletD
	|
RequestDispatcher rd 	|		|		|
	rd.forward()  ->|		|		|
		RequestDispatcher rd 	|		|	
			rd.forward() ->	|		|
				RequestDispatcher rd 	|
					rd.forward() ->	|
							| ultimate output of this
							  would be produced

================================================================================



Request Tracking -> PlaceOrder -> Kitchen ->Delivery -> Billing


Session Tracking ->


-------------------------------------------------------------------

		
	ClothShoppingServlet		GroceryShoppingServlet

			BillingServlet

	ElecronicShoppingServlet	BookShoppingServlet
	|					|
	+---------------------------------------+
	|
--------|-----------------------------------------------------------
	| newCart is assigned
	user1

	HttpSession cart = request.getSession(true);	servlet1
	HttpSession cart = request.getSession(true)	servlet2
	HttpSession cart = request.getSession(true)	servlet3
	HttpSession cart = request.getSession(true)	servlet4
	HttpSession cart = request.getSession(true)	servlet5



-------------------------------

	Context = ServletContext - means handle to Tomcat Server

	Config = ServletConfig - handle to your servlet

		

	Assignment : modify web.xml as per the below requirement
	-----------------

		drivername <-- context
		url<-- context

		username <--config
		password <--config ( can ignore for hsqldb )


	And your servlet will access above four variables
	for jdbc

	Assignment
	-----------------
	convert your own servlet jdbc into DAO pattern
	




	







	
